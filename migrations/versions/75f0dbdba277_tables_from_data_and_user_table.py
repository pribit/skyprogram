"""tables from data and user table

Revision ID: 75f0dbdba277
Revises: None
Create Date: 2021-12-05 16:57:48.662274

"""

# revision identifiers, used by Alembic.
import json
import os

import sqlalchemy as sa
from alembic import context, op

import config
from app.models import Bookmark, Comment, Post, User

revision = '75f0dbdba277'
down_revision = None

data_dir = os.path.join(config.base_dir, 'migrations/data')


def upgrade():
    schema_upgrades()
    if context.get_x_argument(as_dictionary=True).get('data', None):
        data_upgrades()


def downgrade():
    if context.get_x_argument(as_dictionary=True).get('data', None):
        data_downgrades()
    schema_downgrades()


def schema_upgrades():
    """schema upgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'user',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('username', sa.String(length=63), nullable=True),
        sa.Column('avatar', sa.String(), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_username'), 'user', ['username'], unique=True)
    op.create_table(
        'post',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.Column('content', sa.Text(), nullable=True),
        sa.Column('likes_count', sa.Integer(), nullable=True),
        sa.Column('views_count', sa.Integer(), nullable=True),
        sa.Column('pic', sa.String(), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'bookmark',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('post_id', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['post_id'], ['post.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'comment',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('post_id', sa.Integer(), nullable=True),
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.Column('comment', sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(['post_id'], ['post.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def schema_downgrades():
    """schema downgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('comment')
    op.drop_table('bookmark')
    op.drop_table('post')
    op.drop_index(op.f('ix_user_username'), table_name='user')
    op.drop_table('user')
    # ### end Alembic commands ###


def data_upgrades():
    """Add any optional data upgrade migrations here!"""
    users = {}

    with open(os.path.join(data_dir, 'data.json')) as file:
        data = json.load(file)
        posts = []

        for post in data:
            username = post["poster_name"]
            users.setdefault(username, {'id': len(users) + 1, 'username': username, 'avatar': post['poster_avatar']})
            user = users[username]

            posts.append({
                'id': post['pk'],
                'user_id': user['id'],
                'content': post['content'],
                'likes_count': post['likes_count'],
                'views_count': post['views_count'],
                'pic': post['pic'],
            })

    with open(os.path.join(data_dir, 'comments.json')) as file:
        data = json.load(file)
        comments = []

        for comment in data:
            username = comment["commenter_name"]
            users.setdefault(username, {'id': len(users) + 1, 'username': username, 'avatar': None})
            user = users[username]

            comments.append({
                'id': comment['pk'],
                'post_id': comment['post_id'],
                'user_id': user['id'],
                'comment': comment['comment'],
            })

    with open(os.path.join(data_dir, 'bookmarks.json')) as file:
        data = json.load(file)
        bookmarks = []

        for bookmark in data:
            bookmarks.append({
                'id': bookmark['pk'],
                'post_id': bookmark['post_id'],
            })

    op.bulk_insert(User.__table__, list(users.values()))
    op.bulk_insert(Post.__table__, posts)
    op.bulk_insert(Comment.__table__, comments)
    op.bulk_insert(Bookmark.__table__, bookmarks)


def data_downgrades():
    """Add any optional data downgrade migrations here!"""
    op.execute("delete from comment")
    op.execute("delete from bookmark")
    op.execute("delete from post")
    op.execute("delete from user")
